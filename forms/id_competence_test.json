{
    "className": "org.joget.apps.form.model.Form",
    "elements": [
        {
            "className": "org.joget.apps.form.model.Section",
            "elements": [{
                "className": "org.joget.apps.form.model.Column",
                "elements": [{
                    "className": "org.joget.apps.form.lib.TextField",
                    "properties": {
                        "id": "firstName",
                        "label": "firstName",
                        "maxlength": "",
                        "placeholder": "",
                        "readonly": "",
                        "readonlyLabel": "",
                        "size": "",
                        "storeNumeric": "",
                        "style": "",
                        "validator": {
                            "className": "",
                            "properties": {}
                        },
                        "value": "",
                        "workflowVariable": ""
                    }
                }],
                "properties": {"width": "100%"}
            }],
            "properties": {
                "comment": "",
                "id": "section1",
                "join": "",
                "label": "Section",
                "loadBinder": {
                    "className": "",
                    "properties": {}
                },
                "permission": {
                    "className": "",
                    "properties": {}
                },
                "permissionReadonly": "",
                "readonly": "",
                "readonlyLabel": "",
                "regex": "",
                "reverse": "",
                "storeBinder": {
                    "className": "org.joget.apps.form.lib.BeanShellFormBinder",
                    "properties": {
                        "autoHandleFiles": "",
                        "autoHandleWorkflowVariable": "true",
                        "cacheInterval": "",
                        "script": "import org.joget.commons.util.LogUtil;\r\nimport java.sql.*;\r\nimport java.util.*;\r\nimport javax.sql.*;\r\nimport org.joget.commons.util.UuidGenerator;\r\nimport javax.sql.DataSource;\r\nimport org.joget.apps.app.service.AppUtil;\r\n\r\nimport java.util.Properties;\r\nimport javax.mail.Flags;\r\nimport javax.mail.Folder;\r\nimport javax.mail.Message;\r\nimport javax.mail.MessagingException;\r\nimport javax.mail.NoSuchProviderException;\r\nimport javax.mail.Session;\r\nimport javax.mail.Store;\r\nimport javax.mail.search.FlagTerm;\r\n\r\nimport org.joget.apps.app.model.AppDefinition;\r\nimport org.joget.plugin.base.ApplicationPlugin;\r\nimport org.joget.plugin.base.Plugin;\r\nimport org.joget.plugin.base.PluginManager;\r\nimport org.joget.plugin.property.model.PropertyEditable;\r\nimport org.joget.plugin.base.PluginManager;\r\nimport java.util.Collection;\r\nimport org.joget.apps.app.service.AppPluginUtil;\r\n\r\n\r\nimport org.joget.apps.form.model.FormRowSet;\r\nimport org.joget.apps.form.model.FormRow;\r\nimport org.joget.apps.app.service.*;\r\nimport org.joget.apps.form.model.*;\r\nimport org.joget.apps.form.service.*;\r\nimport org.joget.commons.util.LogUtil;\r\nimport java.util.*;\r\nimport java.util.Set;\r\nimport org.joget.apps.app.service.AppUtil;\r\nimport org.joget.commons.util.SecurityUtil;\r\nimport org.joget.directory.dao.UserDao;\r\nimport org.joget.directory.dao.RoleDao;\r\nimport org.joget.directory.model.User;\r\nimport org.joget.directory.model.service.DirectoryUtil;\r\nimport org.joget.directory.model.service.UserSecurity;\r\nimport org.joget.apps.workflow.security.WorkflowUserDetails;\r\nimport org.joget.directory.model.service.DirectoryManager;\r\nimport org.joget.workflow.model.service.WorkflowUserManager;\r\nimport org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\r\nimport org.springframework.security.core.Authentication;\r\nimport org.joget.workflow.util.WorkflowUtil;\r\nimport org.springframework.security.core.context.SecurityContextHolder;\r\nimport javax.servlet.http.HttpSession;\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport org.springframework.security.web.savedrequest.HttpSessionRequestCache;\r\nimport org.springframework.security.web.savedrequest.SavedRequest;\r\nimport org.joget.commons.util.StringUtil;\r\nimport java.sql.Connection;\r\nimport java.sql.PreparedStatement;\r\nimport java.sql.ResultSet;\r\nimport java.sql.SQLException;\r\nimport javax.sql.DataSource;\r\nimport org.joget.commons.util.UuidGenerator;\r\n\r\n\r\nimport org.apache.http.HttpEntity;\r\nimport org.apache.http.util.EntityUtils;\r\nimport java.nio.charset.StandardCharsets;\r\nimport java.io.IOException;\r\nimport org.apache.http.HttpResponse;\r\nimport org.apache.http.auth.AuthScope;\r\nimport org.apache.http.auth.UsernamePasswordCredentials;\r\nimport org.apache.http.client.CredentialsProvider;\r\nimport org.apache.http.client.HttpClient;\r\nimport org.apache.http.entity.ContentType;\r\nimport org.apache.http.client.methods.HttpGet;\r\nimport org.apache.http.client.methods.HttpPost;\r\nimport org.apache.http.impl.client.BasicCredentialsProvider;\r\nimport org.apache.http.impl.client.HttpClientBuilder;\r\nimport org.apache.http.impl.client.CloseableHttpClient;\r\n\r\nimport org.bson.Document;\r\nimport org.apache.http.entity.StringEntity;\r\nimport org.apache.http.impl.client.HttpClients;\r\n\r\nimport org.joget.apps.form.model.FormRowSet;\r\nimport org.joget.apps.form.model.FormRow;\r\n\r\n\r\npublic void insertLine(String query){\r\n    DataSource ds = (DataSource) AppUtil.getApplicationContext().getBean(\"setupDataSource\");\r\n    Connection con3 = ds.getConnection();\r\n    LogUtil.info(\"QUERY\", query);\r\n    try {\r\n        if (!con3.isClosed()) {\r\n                \r\n            String insertSql3 = query;\r\n                \r\n            PreparedStatement stmtInsert3 = con3.prepareStatement(insertSql3);            \r\n            ////Execute SQL statement\r\n            stmtInsert3.executeUpdate();\r\n\r\n        }\r\n        \r\n    } catch (Exception ex) {\r\n        LogUtil.error(\"Dictionnaire signalement\", ex, \"Error storing using jdbc\");\r\n    } finally {\r\n        try {\r\n            if (con3 != null) {\r\n                con3.close();\r\n            }\r\n        } catch (Exception ex) {\r\n            LogUtil.error(\"Dictionnaire signalement\", ex, \"Error closing the jdbc connection\");\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\npublic void generateDoc(String body_src){\r\n    try{\r\n        LogUtil.info(\"IN METHOD : \", \"POST INFO\");\r\n        // CredentialsProvider provider = new BasicCredentialsProvider();\r\n        // UsernamePasswordCredentials credentials = new UsernamePasswordCredentials(\"#envVariable.basic_auth_username#\", \"#envVariable.basic_auth_password#\");\r\n        // provider.setCredentials(AuthScope.ANY, credentials);\r\n        // HttpClient client = HttpClientBuilder.create().setDefaultCredentialsProvider(provider).build();\r\n\r\n        HttpClient client = HttpClientBuilder.create().build();\r\n\r\n        // CloseableHttpClient client = HttpClients.createDefault();\r\n\r\n        String completeUrl = \"http://127.0.0.1:5000/generate\";\r\n        LogUtil.info(\"URL URL\", completeUrl);\r\n        HttpPost httpPost = new HttpPost(completeUrl);\r\n        \r\n        httpPost.addHeader(\"Accept\", \"application/json\");\r\n        httpPost.addHeader(\"Content-type\", \"application/json\");\r\n        httpPost.addHeader(\"Accept-Charset\", \"utf-8\");\r\n       \r\n        String body = body_src;\r\n\r\n        \r\n        \r\n        LogUtil.info(\"BODY\", body);\r\n        \r\n        StringEntity stringEntity = new StringEntity(body, \"UTF-8\");\r\n        stringEntity.setContentType(\"application/json\");\r\n        // httpPost.getRequestLine();\r\n        httpPost.setEntity(stringEntity);\r\n        \r\n        HttpResponse response = client.execute(httpPost);\r\n        LogUtil.info(\"HTTPPOST\", response.toString());\r\n        int statusCode = response.getStatusLine().getStatusCode();\r\n        LogUtil.info(\"STATUS CODE\", statusCode+\"\");\r\n        \r\n    } catch (Exception ex) {\r\n            System.out.println(ex);\r\n    }\r\n}\r\n\r\n\r\n // LETTRE D'ENGAGEMENT\r\n String body_lettre_eng = \"{ \\\"source_path\\\":\\\"my_word_template.docx\\\", \\\"data\\\":{\\\"firstName\\\":\\\"kjhdfkjfdkj\\\"}, \\\"output_path\\\":\\\"/home/ali/Bureau/API Python/\\\", \\\"output_file_name\\\":\\\"outpout_tamplate.docx\\\" }\";\r\n // String body_lettre_eng = \"{\\\"hé\\\":\\\"hé\\\"}\";\r\n// String query_lettre_eng = \"INSERT INTO jwdb.app_fd_lettreengagement ( id,c_lettreengagement,c_uuid_evaluation,c_id_internal_eval,c_username_expert) VALUES ('\"+idfrm_lttr_eng+\"','Lettre_engagement_expert.docx','\"+c_uuid_eval+\"','\"+c_id_eval+\"','\"+c_username_expert+\"');\";\r\n \r\n\r\n//INSERTING LINES IN DB\r\n//insertLine(query_lettre_eng);\r\n\r\n //GENERATING DOCS\r\n generateDoc(body_lettre_eng);"
                    }
                },
                "visibilityControl": "",
                "visibilityValue": ""
            }
        },
        {
            "className": "org.joget.apps.form.model.Section",
            "elements": [{
                "className": "org.joget.apps.form.model.Column",
                "elements": [{
                    "className": "org.joget.SubformRepeater",
                    "properties": {
                        "addMode": "enable",
                        "collapsedByDefault": "",
                        "collapsible": "true",
                        "deleteMode": "enable",
                        "editFormDefId": "",
                        "editMode": "enable",
                        "enableSorting": "",
                        "errorMessage": "@@form.formgrid.invalidNumberOfRow@@",
                        "formDefId": "idExperience",
                        "id": "idExperience",
                        "label": "Ajouter un expérience",
                        "loadBinder": {
                            "className": "org.joget.apps.form.lib.BeanShellFormBinder",
                            "properties": {
                                "autoHandleFiles": "",
                                "autoHandleWorkflowVariable": "true",
                                "cacheInterval": "",
                                "script": "import java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport javax.sql.DataSource;\nimport org.joget.apps.app.service.AppUtil;\nimport org.joget.apps.form.model.Form;\nimport org.joget.apps.form.model.Element;\nimport org.joget.apps.form.model.FormData;\nimport org.joget.apps.form.model.FormRow;\nimport org.joget.apps.form.model.FormRowSet;\nimport org.joget.apps.form.service.FormUtil;\nimport org.joget.commons.util.UuidGenerator;\n \nFormRowSet f = new FormRowSet();\nf.setMultiRow(true);\n \n\nDataSource ds = (DataSource) AppUtil.getApplicationContext().getBean(\"setupDataSource\");\n \ncon = ds.getConnection();\n \nif (!con.isClosed()) {\n    \n    //String recordId = \"#requestParam.id#\";\n    String fk = \"#currentUser.username#\";\n   \n    String sql = \"select c_idPoste,c_identrepris,c_idClient,c_idDateFin,c_idDescription from app_fd_Experiences where c_idFKuser=?\";\n    PreparedStatement stmt = con.prepareStatement(sql);\n    stmt.setString(1, fk);\n  \n    \n    ResultSet rs = stmt.executeQuery();\n         \n   \n    while (rs.next()) {\n        FormRow r1 = new FormRow();\n        r1.put(\"idPoste\", rs.getString(1));\n        r1.put(\"identrepris\", rs.getString(2));\n        r1.put(\"idClient\", rs.getString(3));\n        r1.put(\"idDateFin\", rs.getString(4));\n        r1.put(\"idDescription\", rs.getString(5));\n        f.add(r1);\n    }\n}\n \nreturn f;"
                            }
                        },
                        "readonly": "",
                        "readonlyLabel": "",
                        "storeBinder": {
                            "className": "org.joget.apps.form.lib.BeanShellFormBinder",
                            "properties": {
                                "autoHandleFiles": "",
                                "autoHandleWorkflowVariable": "true",
                                "cacheInterval": "",
                                "script": "import java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport javax.sql.DataSource;\nimport org.joget.apps.app.service.AppUtil;\nimport org.joget.apps.form.model.Form;\nimport org.joget.apps.form.model.Element;\nimport org.joget.apps.form.model.FormData;\nimport org.joget.apps.form.model.FormRow;\nimport org.joget.apps.form.model.FormRowSet;\nimport org.joget.apps.form.service.FormUtil;\nimport org.joget.commons.util.UuidGenerator;\n \npublic saveGridRows(Element element, FormRowSet rows, FormData formData) {\n     \n    String recordId = null;\n    Connection con = null;\n     \n    try {\n       \n        DataSource ds = (DataSource) AppUtil.getApplicationContext().getBean(\"setupDataSource\");\n \n        con = ds.getConnection();\n         \n        if(!con.isClosed()) {\n          \n            UuidGenerator uuid = UuidGenerator.getInstance();\n             //String recordId = \"#requestParam.id#\";\n             \n            Iterator i= rows.iterator();\n            while (i.hasNext()) {\n                \n                \n                FormRow row = (FormRow) i.next();\n                 \n                String pId = uuid.getUuid();\n                String gridColumn3 = row.get(\"idFKuser\");\n                String gridColumn1 = row.get(\"idPoste\");\n                String gridColumn2 = row.get(\"identrepris\");\n                String gridColumn4 = row.get(\"idClient\");\n                String gridColumn6 = row.get(\"idDateFin\");\n                String gridColumn7 = row.get(\"idDescription\");\n                \n                \n                \n                \n                String insertSql = \"INSERT INTO app_fd_Experiences (id,c_idPoste,c_identrepris,c_idClient,c_idDateFin,c_idDescription,c_idFKuser) VALUES (?,?,?,?,?,?,?,?);\";\n                PreparedStatement stmtInsert = con.prepareStatement(insertSql);\n                 \n                stmtInsert.setString(1, pId);\n                stmtInsert.setString(2, gridColumn1);\n                stmtInsert.setString(3, gridColumn2);\n                stmtInsert.setString(4, gridColumn4);\n                stmtInsert.setString(5, gridColumn6);\n                stmtInsert.setString(6, gridColumn7);\n                stmtInsert.setString(7, gridColumn3);\n               \n                 \n               \n                stmtInsert.executeUpdate();\n            }\n        }\n    } catch (Exception ex) {\n        LogUtil.error(\"Your App/Plugin Name\", ex, \"Error storing using jdbc\");\n    } finally {\n        try {\n            if (con != null) {\n                con.close();\n            }\n        } catch (Exception ex) {\n            LogUtil.error(\"Your App/Plugin Name\", ex, \"Error closing the jdbc connection\");\n        }\n    }\n}\n\nsaveGridRows(element, rows, formData);\n"
                            }
                        },
                        "uniqueKey": "",
                        "validateMaxRow": "",
                        "validateMinRow": "",
                        "validator": {
                            "className": "",
                            "properties": {}
                        }
                    }
                }],
                "properties": {"width": "100%"}
            }],
            "properties": {
                "comment": "",
                "id": "id_experience",
                "join": "",
                "label": "EXPÉRIENCES",
                "loadBinder": {
                    "className": "",
                    "properties": {}
                },
                "permission": {
                    "className": "",
                    "properties": {}
                },
                "permissionReadonly": "",
                "readonly": "",
                "readonlyLabel": "",
                "regex": "",
                "reverse": "",
                "storeBinder": {
                    "className": "",
                    "properties": {}
                },
                "visibilityControl": "",
                "visibilityValue": ""
            }
        },
        {
            "className": "org.joget.apps.form.model.Section",
            "elements": [{
                "className": "org.joget.apps.form.model.Column",
                "elements": [{
                    "className": "org.joget.SubformRepeater",
                    "properties": {
                        "addMode": "enable",
                        "collapsedByDefault": "",
                        "collapsible": "true",
                        "deleteMode": "enable",
                        "editFormDefId": "",
                        "editMode": "enable",
                        "enableSorting": "",
                        "errorMessage": "@@form.formgrid.invalidNumberOfRow@@",
                        "formDefId": "id_formation",
                        "id": "idFormation",
                        "label": "Ajouter un Formation",
                        "loadBinder": {
                            "className": "org.joget.apps.form.lib.BeanShellFormBinder",
                            "properties": {
                                "autoHandleFiles": "",
                                "autoHandleWorkflowVariable": "true",
                                "cacheInterval": "",
                                "script": "import java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport javax.sql.DataSource;\nimport org.joget.apps.app.service.AppUtil;\nimport org.joget.apps.form.model.Form;\nimport org.joget.apps.form.model.Element;\nimport org.joget.apps.form.model.FormData;\nimport org.joget.apps.form.model.FormRow;\nimport org.joget.apps.form.model.FormRowSet;\nimport org.joget.apps.form.service.FormUtil;\nimport org.joget.commons.util.UuidGenerator;\n \nFormRowSet f = new FormRowSet();\nf.setMultiRow(true);\n \n\nDataSource ds = (DataSource) AppUtil.getApplicationContext().getBean(\"setupDataSource\");\n \ncon = ds.getConnection();\n \nif (!con.isClosed()) {\n    \n   // String recordId = \"#requestParam.id#\";\n    String fk = \"#currentUser.username#\";\n   \n    String sql = \"select c_idFormation,c_id_niveau,c_idDomaine,c_idEtablissement,c_idDateTerminer,c_idDescription from app_fd_formation where c_idFKuser=?\";\n    PreparedStatement stmt = con.prepareStatement(sql);\n    stmt.setString(1, fk);\n  \n    \n    ResultSet rs = stmt.executeQuery();\n         \n   \n    while (rs.next()) {\n        FormRow r1 = new FormRow();\n        r1.put(\"idFormation\", rs.getString(1));\n        r1.put(\"id_niveau\", rs.getString(2));\n        r1.put(\"idDomaine\", rs.getString(3));\n        r1.put(\"idEtablissement\", rs.getString(4));\n        r1.put(\"idDateTerminer\", rs.getString(5));\n        r1.put(\"idDescription\", rs.getString(6));\n        f.add(r1);\n    }\n}\n \nreturn f;"
                            }
                        },
                        "readonly": "",
                        "readonlyLabel": "",
                        "storeBinder": {
                            "className": "org.joget.apps.form.lib.BeanShellFormBinder",
                            "properties": {
                                "autoHandleFiles": "",
                                "autoHandleWorkflowVariable": "true",
                                "cacheInterval": "",
                                "script": "import java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport javax.sql.DataSource;\nimport org.joget.apps.app.service.AppUtil;\nimport org.joget.apps.form.model.Form;\nimport org.joget.apps.form.model.Element;\nimport org.joget.apps.form.model.FormData;\nimport org.joget.apps.form.model.FormRow;\nimport org.joget.apps.form.model.FormRowSet;\nimport org.joget.apps.form.service.FormUtil;\nimport org.joget.commons.util.UuidGenerator;\n \npublic saveGridRows(Element element, FormRowSet rows, FormData formData) {\n     \n    String recordId = null;\n    Connection con = null;\n     \n    try {\n       \n        DataSource ds = (DataSource) AppUtil.getApplicationContext().getBean(\"setupDataSource\");\n \n        con = ds.getConnection();\n         \n        if(!con.isClosed()) {\n          \n            UuidGenerator uuid = UuidGenerator.getInstance();\n             //String recordId = \"#requestParam.id#\";\n             \n            Iterator i= rows.iterator();\n            while (i.hasNext()) {\n                FormRow row = (FormRow) i.next();\n                 \n                String pId = uuid.getUuid();\n                //String gridColumn3 = recordId;\n                String gridColumn3 = row.get(\"idFKuser\");\n                String gridColumn1 = row.get(\"idFormation\");\n                String gridColumn2 = row.get(\"id_niveau\");\n                String gridColumn4 = row.get(\"idDomaine\");\n                String gridColumn5 = row.get(\"idEtablissement\");\n                String gridColumn6 = row.get(\"idDateTerminer\");\n                String gridColumn7 = row.get(\"idDescription\");\n                \n                \n                String insertSql = \"INSERT INTO app_fd_formation (id,c_idFormation,c_id_niveau,c_idDomaine,c_idEtablissement,c_idDateTerminer,c_idDescription,c_idFKuser) VALUES (?,?,?,?,?,?,?,?);\";\n                PreparedStatement stmtInsert = con.prepareStatement(insertSql);\n                 \n                stmtInsert.setString(1, pId);\n                stmtInsert.setString(2, gridColumn1);\n                stmtInsert.setString(3, gridColumn2);\n                stmtInsert.setString(4, gridColumn4);\n                stmtInsert.setString(5, gridColumn5);\n                stmtInsert.setString(6, gridColumn6);\n                stmtInsert.setString(7, gridColumn7);\n                stmtInsert.setString(8, gridColumn3);\n               \n                 \n               \n                stmtInsert.executeUpdate();\n            }\n        }\n    } catch (Exception ex) {\n        LogUtil.error(\"Your App/Plugin Name\", ex, \"Error storing using jdbc\");\n    } finally {\n        try {\n            if (con != null) {\n                con.close();\n            }\n        } catch (Exception ex) {\n            LogUtil.error(\"Your App/Plugin Name\", ex, \"Error closing the jdbc connection\");\n        }\n    }\n}\n\nsaveGridRows(element, rows, formData);\n"
                            }
                        },
                        "uniqueKey": "",
                        "validateMaxRow": "",
                        "validateMinRow": "",
                        "validator": {
                            "className": "",
                            "properties": {}
                        }
                    }
                }],
                "properties": {"width": "100%"}
            }],
            "properties": {
                "comment": "",
                "id": "idFormation",
                "join": "",
                "label": "FORMATIONS",
                "loadBinder": {
                    "className": "",
                    "properties": {}
                },
                "permission": {
                    "className": "",
                    "properties": {}
                },
                "permissionReadonly": "",
                "readonly": "",
                "readonlyLabel": "",
                "regex": "",
                "reverse": "",
                "storeBinder": {
                    "className": "",
                    "properties": {}
                },
                "visibilityControl": "",
                "visibilityValue": ""
            }
        },
        {
            "className": "org.joget.apps.form.model.Section",
            "elements": [{
                "className": "org.joget.apps.form.model.Column",
                "elements": [{
                    "className": "org.joget.SubformRepeater",
                    "properties": {
                        "addMode": "enable",
                        "collapsedByDefault": "",
                        "collapsible": "true",
                        "deleteMode": "enable",
                        "editFormDefId": "",
                        "editMode": "enable",
                        "enableSorting": "",
                        "errorMessage": "@@form.formgrid.invalidNumberOfRow@@",
                        "formDefId": "id_competence_cles",
                        "id": "field12",
                        "label": "Ajouter les compétences clés",
                        "loadBinder": {
                            "className": "org.joget.apps.form.lib.BeanShellFormBinder",
                            "properties": {
                                "autoHandleFiles": "",
                                "autoHandleWorkflowVariable": "true",
                                "cacheInterval": "",
                                "script": "import java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport javax.sql.DataSource;\nimport org.joget.apps.app.service.AppUtil;\nimport org.joget.apps.form.model.Form;\nimport org.joget.apps.form.model.Element;\nimport org.joget.apps.form.model.FormData;\nimport org.joget.apps.form.model.FormRow;\nimport org.joget.apps.form.model.FormRowSet;\nimport org.joget.apps.form.service.FormUtil;\nimport org.joget.commons.util.UuidGenerator;\n \nFormRowSet f = new FormRowSet();\nf.setMultiRow(true);\n \n\nDataSource ds = (DataSource) AppUtil.getApplicationContext().getBean(\"setupDataSource\");\n \ncon = ds.getConnection();\n \nif (!con.isClosed()) {\n    \n    //String recordId = \"#requestParam.id#\";\n    String fk = \"#currentUser.username#\";\n   \n    String sql = \"select c_id_competence_cles from app_fd_competence_cles where c_idFKuser=?\";\n    PreparedStatement stmt = con.prepareStatement(sql);\n    stmt.setString(1, fk);\n  \n    \n    ResultSet rs = stmt.executeQuery();\n         \n   \n    while (rs.next()) {\n        FormRow r1 = new FormRow();\n        r1.put(\"id_competence_cles\", rs.getString(1));\n        f.add(r1);\n    }\n}\n \nreturn f;"
                            }
                        },
                        "readonly": "",
                        "readonlyLabel": "",
                        "storeBinder": {
                            "className": "org.joget.apps.form.lib.BeanShellFormBinder",
                            "properties": {
                                "autoHandleFiles": "",
                                "autoHandleWorkflowVariable": "true",
                                "cacheInterval": "",
                                "script": "import java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport javax.sql.DataSource;\nimport org.joget.apps.app.service.AppUtil;\nimport org.joget.apps.form.model.Form;\nimport org.joget.apps.form.model.Element;\nimport org.joget.apps.form.model.FormData;\nimport org.joget.apps.form.model.FormRow;\nimport org.joget.apps.form.model.FormRowSet;\nimport org.joget.apps.form.service.FormUtil;\nimport org.joget.commons.util.UuidGenerator;\n \npublic saveGridRows(Element element, FormRowSet rows, FormData formData) {\n     \n    String recordId = null;\n    Connection con = null;\n     \n    try {\n       \n        DataSource ds = (DataSource) AppUtil.getApplicationContext().getBean(\"setupDataSource\");\n \n        con = ds.getConnection();\n         \n        if(!con.isClosed()) {\n          \n            UuidGenerator uuid = UuidGenerator.getInstance();\n             //String recordId = \"#requestParam.id#\";\n             \n            Iterator i= rows.iterator();\n            while (i.hasNext()) {\n                FormRow row = (FormRow) i.next();\n                 \n                String pId = uuid.getUuid();\n                //String gridColumn0 = recordId;\n                String gridColumn1 = row.get(\"id_competence_cles\");\n                String gridColumn2 = row.get(\"idFKuser\");\n                \n                \n                String insertSql = \"INSERT INTO app_fd_competence_cles (id,c_id_competence_cles,c_idFKuser) VALUES (?,?,?);\";\n                PreparedStatement stmtInsert = con.prepareStatement(insertSql);\n                 \n                stmtInsert.setString(1, pId);\n                stmtInsert.setString(2, gridColumn1);\n                stmtInsert.setString(3, gridColumn2);\n                \n                \n                stmtInsert.executeUpdate();\n            }\n        }\n    } catch (Exception ex) {\n        LogUtil.error(\"Your App/Plugin Name\", ex, \"Error storing using jdbc\");\n    } finally {\n        try {\n            if (con != null) {\n                con.close();\n            }\n        } catch (Exception ex) {\n            LogUtil.error(\"Your App/Plugin Name\", ex, \"Error closing the jdbc connection\");\n        }\n    }\n}\n\nsaveGridRows(element, rows, formData);\n"
                            }
                        },
                        "uniqueKey": "",
                        "validateMaxRow": "",
                        "validateMinRow": "",
                        "validator": {
                            "className": "",
                            "properties": {}
                        }
                    }
                }],
                "properties": {"width": "100%"}
            }],
            "properties": {
                "comment": "",
                "id": "id_competence_cles",
                "join": "",
                "label": "COMPÉTENCES CLÉS",
                "loadBinder": {
                    "className": "",
                    "properties": {}
                },
                "permission": {
                    "className": "",
                    "properties": {}
                },
                "permissionReadonly": "",
                "readonly": "",
                "readonlyLabel": "",
                "regex": "",
                "reverse": "",
                "storeBinder": {
                    "className": "",
                    "properties": {}
                },
                "visibilityControl": "",
                "visibilityValue": ""
            }
        },
        {
            "className": "org.joget.apps.form.model.Section",
            "elements": [{
                "className": "org.joget.apps.form.model.Column",
                "elements": [{
                    "className": "org.joget.SubformRepeater",
                    "properties": {
                        "addMode": "enable",
                        "collapsedByDefault": "",
                        "collapsible": "true",
                        "deleteMode": "enable",
                        "editFormDefId": "",
                        "editMode": "enable",
                        "enableSorting": "",
                        "errorMessage": "@@form.formgrid.invalidNumberOfRow@@",
                        "formDefId": "idCompetence",
                        "id": "idCompetence",
                        "label": "Ajouter un compétence",
                        "loadBinder": {
                            "className": "org.joget.apps.form.lib.BeanShellFormBinder",
                            "properties": {
                                "autoHandleFiles": "",
                                "autoHandleWorkflowVariable": "true",
                                "cacheInterval": "",
                                "script": "import java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport javax.sql.DataSource;\nimport org.joget.apps.app.service.AppUtil;\nimport org.joget.apps.form.model.Form;\nimport org.joget.apps.form.model.Element;\nimport org.joget.apps.form.model.FormData;\nimport org.joget.apps.form.model.FormRow;\nimport org.joget.apps.form.model.FormRowSet;\nimport org.joget.apps.form.service.FormUtil;\nimport org.joget.commons.util.UuidGenerator;\n \nFormRowSet f = new FormRowSet();\nf.setMultiRow(true);\n \n\nDataSource ds = (DataSource) AppUtil.getApplicationContext().getBean(\"setupDataSource\");\n \ncon = ds.getConnection();\n \nif (!con.isClosed()) {\n    \n    //String recordId = \"#requestParam.id#\";\n        String fk = \"#currentUser.username#\";\n   \n    String sql = \"select c_idCompetence,c_idNiveau from app_fd_competence_technique where c_idFKuser=?\";\n    PreparedStatement stmt = con.prepareStatement(sql);\n    stmt.setString(1, fk);\n  \n    \n    ResultSet rs = stmt.executeQuery();\n         \n   \n    while (rs.next()) {\n        FormRow r1 = new FormRow();\n        r1.put(\"idCompetence\", rs.getString(1));\n        r1.put(\"idNiveau\", rs.getString(2));\n        f.add(r1);\n    }\n}\n \nreturn f;"
                            }
                        },
                        "readonly": "",
                        "readonlyLabel": "",
                        "storeBinder": {
                            "className": "org.joget.apps.form.lib.BeanShellFormBinder",
                            "properties": {
                                "autoHandleFiles": "",
                                "autoHandleWorkflowVariable": "true",
                                "cacheInterval": "",
                                "script": "import java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport javax.sql.DataSource;\nimport org.joget.apps.app.service.AppUtil;\nimport org.joget.apps.form.model.Form;\nimport org.joget.apps.form.model.Element;\nimport org.joget.apps.form.model.FormData;\nimport org.joget.apps.form.model.FormRow;\nimport org.joget.apps.form.model.FormRowSet;\nimport org.joget.apps.form.service.FormUtil;\nimport org.joget.commons.util.UuidGenerator;\n \npublic saveGridRows(Element element, FormRowSet rows, FormData formData) {\n     \n    String recordId = null;\n    Connection con = null;\n     \n    try {\n       \n        DataSource ds = (DataSource) AppUtil.getApplicationContext().getBean(\"setupDataSource\");\n \n        con = ds.getConnection();\n         \n        if(!con.isClosed()) {\n          \n            UuidGenerator uuid = UuidGenerator.getInstance();\n             //String recordId = \"#requestParam.id#\";\n             \n            Iterator i= rows.iterator();\n            while (i.hasNext()) {\n                FormRow row = (FormRow) i.next();\n                 \n                String pId = uuid.getUuid();\n                //String gridColumn0 = recordId;\n                String gridColumn1 = row.get(\"idCompetence\");\n                String gridColumn2 = row.get(\"idNiveau\");\n                String gridColumn3 = row.get(\"idFKuser\");\n                \n                \n                String insertSql = \"INSERT INTO app_fd_competence_technique (id,c_idCompetence,c_idNiveau,c_idFKuser) VALUES (?,?,?,?);\";\n                PreparedStatement stmtInsert = con.prepareStatement(insertSql);\n                 \n                stmtInsert.setString(1, pId);\n                stmtInsert.setString(2, gridColumn1);\n                stmtInsert.setString(3, gridColumn2);\n                stmtInsert.setString(4, gridColumn3);\n                \n                \n                stmtInsert.executeUpdate();\n            }\n        }\n    } catch (Exception ex) {\n        LogUtil.error(\"Your App/Plugin Name\", ex, \"Error storing using jdbc\");\n    } finally {\n        try {\n            if (con != null) {\n                con.close();\n            }\n        } catch (Exception ex) {\n            LogUtil.error(\"Your App/Plugin Name\", ex, \"Error closing the jdbc connection\");\n        }\n    }\n}\n\nsaveGridRows(element, rows, formData);\n"
                            }
                        },
                        "uniqueKey": "",
                        "validateMaxRow": "",
                        "validateMinRow": "",
                        "validator": {
                            "className": "",
                            "properties": {}
                        }
                    }
                }],
                "properties": {"width": "100%"}
            }],
            "properties": {
                "comment": "",
                "id": "idCompetence_1",
                "join": "",
                "label": "COMPÉTENCES TECHNIQUES",
                "loadBinder": {
                    "className": "",
                    "properties": {}
                },
                "permission": {
                    "className": "",
                    "properties": {}
                },
                "permissionReadonly": "",
                "readonly": "",
                "readonlyLabel": "",
                "regex": "",
                "reverse": "",
                "storeBinder": {
                    "className": "",
                    "properties": {}
                },
                "visibilityControl": "",
                "visibilityValue": ""
            }
        },
        {
            "className": "org.joget.apps.form.model.Section",
            "elements": [{
                "className": "org.joget.apps.form.model.Column",
                "elements": [{
                    "className": "org.joget.SubformRepeater",
                    "properties": {
                        "addMode": "enable",
                        "collapsedByDefault": "",
                        "collapsible": "true",
                        "deleteMode": "enable",
                        "editFormDefId": "",
                        "editMode": "enable",
                        "enableSorting": "",
                        "errorMessage": "@@form.formgrid.invalidNumberOfRow@@",
                        "formDefId": "inLangue",
                        "id": "idLange",
                        "label": "Ajouter un Langue",
                        "loadBinder": {
                            "className": "org.joget.apps.form.lib.BeanShellFormBinder",
                            "properties": {
                                "autoHandleFiles": "",
                                "autoHandleWorkflowVariable": "true",
                                "cacheInterval": "",
                                "script": "import java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport javax.sql.DataSource;\nimport org.joget.apps.app.service.AppUtil;\nimport org.joget.apps.form.model.Form;\nimport org.joget.apps.form.model.Element;\nimport org.joget.apps.form.model.FormData;\nimport org.joget.apps.form.model.FormRow;\nimport org.joget.apps.form.model.FormRowSet;\nimport org.joget.apps.form.service.FormUtil;\nimport org.joget.commons.util.UuidGenerator;\n \nFormRowSet f = new FormRowSet();\nf.setMultiRow(true);\n \n\nDataSource ds = (DataSource) AppUtil.getApplicationContext().getBean(\"setupDataSource\");\n \ncon = ds.getConnection();\n \nif (!con.isClosed()) {\n    \n    //String recordId = \"#requestParam.id#\";\n    String fk = \"#currentUser.username#\";\n   \n    String sql = \"select c_idLangue,c_idNiveau from app_fd_Langue where c_idFKuser=?\";\n    PreparedStatement stmt = con.prepareStatement(sql);\n    stmt.setString(1, fk);\n  \n    \n    ResultSet rs = stmt.executeQuery();\n         \n   \n    while (rs.next()) {\n        FormRow r1 = new FormRow();\n        r1.put(\"idLangue\", rs.getString(1));\n        r1.put(\"idNiveau\", rs.getString(2));\n        f.add(r1);\n    }\n}\n \nreturn f;"
                            }
                        },
                        "readonly": "",
                        "readonlyLabel": "",
                        "storeBinder": {
                            "className": "org.joget.apps.form.lib.BeanShellFormBinder",
                            "properties": {
                                "autoHandleFiles": "",
                                "autoHandleWorkflowVariable": "true",
                                "cacheInterval": "",
                                "script": "import java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport javax.sql.DataSource;\nimport org.joget.apps.app.service.AppUtil;\nimport org.joget.apps.form.model.Form;\nimport org.joget.apps.form.model.Element;\nimport org.joget.apps.form.model.FormData;\nimport org.joget.apps.form.model.FormRow;\nimport org.joget.apps.form.model.FormRowSet;\nimport org.joget.apps.form.service.FormUtil;\nimport org.joget.commons.util.UuidGenerator;\n \npublic saveGridRows(Element element, FormRowSet rows, FormData formData) {\n     \n    String recordId = null;\n    Connection con = null;\n     \n    try {\n       \n        DataSource ds = (DataSource) AppUtil.getApplicationContext().getBean(\"setupDataSource\");\n \n        con = ds.getConnection();\n         \n        if(!con.isClosed()) {\n          \n            UuidGenerator uuid = UuidGenerator.getInstance();\n             //String recordId = \"#requestParam.id#\";\n             \n            Iterator i= rows.iterator();\n            while (i.hasNext()) {\n                FormRow row = (FormRow) i.next();\n                 \n                String pId = uuid.getUuid();\n                String gridColumn1 = row.get(\"idLangue\");\n                String gridColumn2 = row.get(\"idNiveau\");\n                String gridColumn3 = row.get(\"idFKuser\");\n                \n                \n                String insertSql = \"INSERT INTO app_fd_Langue (id,c_idLangue,c_idNiveau,c_idFKuser) VALUES (?,?,?,?);\";\n                PreparedStatement stmtInsert = con.prepareStatement(insertSql);\n                 \n                stmtInsert.setString(1, pId);\n                stmtInsert.setString(2, gridColumn1);\n                stmtInsert.setString(3, gridColumn2);\n                stmtInsert.setString(4, gridColumn3);\n               \n                 \n               \n                stmtInsert.executeUpdate();\n            }\n        }\n    } catch (Exception ex) {\n        LogUtil.error(\"Your App/Plugin Name\", ex, \"Error storing using jdbc\");\n    } finally {\n        try {\n            if (con != null) {\n                con.close();\n            }\n        } catch (Exception ex) {\n            LogUtil.error(\"Your App/Plugin Name\", ex, \"Error closing the jdbc connection\");\n        }\n    }\n}\n\nsaveGridRows(element, rows, formData);\n"
                            }
                        },
                        "uniqueKey": "",
                        "validateMaxRow": "",
                        "validateMinRow": "",
                        "validator": {
                            "className": "",
                            "properties": {}
                        }
                    }
                }],
                "properties": {"width": "100%"}
            }],
            "properties": {
                "comment": "",
                "id": "idLangue",
                "join": "",
                "label": "LANGUES",
                "loadBinder": {
                    "className": "",
                    "properties": {}
                },
                "permission": {
                    "className": "",
                    "properties": {}
                },
                "permissionReadonly": "",
                "readonly": "",
                "readonlyLabel": "",
                "regex": "",
                "reverse": "",
                "storeBinder": {
                    "className": "",
                    "properties": {}
                },
                "visibilityControl": "",
                "visibilityValue": ""
            }
        },
        {
            "className": "org.joget.apps.form.model.Section",
            "elements": [{
                "className": "org.joget.apps.form.model.Column",
                "elements": [{
                    "className": "org.joget.plugin.SectionWizard",
                    "properties": {
                        "clickableStep": "true",
                        "id": "field14",
                        "sections": "infoPersonnel,id_experience,idFormation,idCompetence_1,id_competence_cles,idLangue"
                    }
                }],
                "properties": {"width": "100%"}
            }],
            "properties": {
                "comment": "",
                "id": "section6",
                "join": "",
                "label": "CV de #currentUser.username#",
                "loadBinder": {
                    "className": "",
                    "properties": {}
                },
                "permission": {
                    "className": "",
                    "properties": {}
                },
                "permissionReadonly": "",
                "readonly": "",
                "readonlyLabel": "",
                "regex": "",
                "reverse": "",
                "storeBinder": {
                    "className": "",
                    "properties": {}
                },
                "visibilityControl": "",
                "visibilityValue": ""
            }
        }
    ],
    "properties": {
        "description": "",
        "id": "id_competence_test",
        "loadBinder": {"className": "org.joget.apps.form.lib.WorkflowFormBinder"},
        "name": "test_competence",
        "storeBinder": {"className": "org.joget.apps.form.lib.WorkflowFormBinder"},
        "tableName": "testcompetence"
    }
}