{
    "className": "org.joget.apps.form.model.Form",
    "elements": [
        {
            "className": "org.joget.apps.form.model.Section",
            "elements": [{
                "className": "org.joget.apps.form.model.Column",
                "elements": [{
                    "className": "org.joget.SubformRepeater",
                    "properties": {
                        "addMode": "disable",
                        "collapsedByDefault": "",
                        "collapsible": "true",
                        "deleteMode": "disable",
                        "editFormDefId": "",
                        "editMode": "enable",
                        "enableSorting": "",
                        "errorMessage": "@@form.formgrid.invalidNumberOfRow@@",
                        "formDefId": "id_infoPersonnel",
                        "id": "Profil",
                        "label": "Informations personnelles",
                        "loadBinder": {
                            "className": "org.joget.apps.form.lib.BeanShellFormBinder",
                            "properties": {
                                "autoHandleFiles": "",
                                "autoHandleWorkflowVariable": "true",
                                "cacheInterval": "",
                                "script": "import java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport javax.sql.DataSource;\nimport org.joget.apps.app.service.AppUtil;\nimport org.joget.apps.form.model.Form;\nimport org.joget.apps.form.model.Element;\nimport org.joget.apps.form.model.FormData;\nimport org.joget.apps.form.model.FormRow;\nimport org.joget.apps.form.model.FormRowSet;\nimport org.joget.apps.form.service.FormUtil;\nimport org.joget.commons.util.UuidGenerator;\n \nFormRowSet f = new FormRowSet();\nf.setMultiRow(true);\n \n\nDataSource ds = (DataSource) AppUtil.getApplicationContext().getBean(\"setupDataSource\");\n \ncon = ds.getConnection();\n \nif (!con.isClosed()) {\n    \n    //String jib_id = \"#requestParam.id#\";\n    String fk = \"#currentUser.username#\";\n   \n    String x = \"select util.id,firstName, lastName, email , role ,departmentId,organizationId  from dir_user util,dir_employment emp where util.id=emp.userId and util.id=?\";\n    PreparedStatement stmt = con.prepareStatement(x);\n    stmt.setString(1, fk);\n  \n    \n    ResultSet rs = stmt.executeQuery();\n    \n         \n   \n    while (rs.next()) {\n        FormRow r1 = new FormRow();\n        r1.put(\"idGenerExperience\", rs.getString(1));\n        r1.put(\"idFirstName\", rs.getString(2));\n        r1.put(\"idLastName\", rs2.getString(3));\n        r1.put(\"idAdress\", rs2.getString(4));\n        r1.put(\"idRole\", rs2.getString(5));\n        r1.put(\"idDepartement\", rs.getString(6));\n        r1.put(\"idOrg\", rs.getString(7));\n        f.add(r1);\n    }\n}\n \nreturn f;"
                            }
                        },
                        "permissionHidden": "",
                        "readonly": "",
                        "readonlyLabel": "true",
                        "storeBinder": {
                            "className": "org.joget.apps.form.lib.BeanShellFormBinder",
                            "properties": {
                                "autoHandleFiles": "",
                                "autoHandleWorkflowVariable": "true",
                                "cacheInterval": "",
                                "script": "import java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport javax.sql.DataSource;\nimport org.joget.apps.app.service.AppUtil;\nimport org.joget.apps.form.model.Form;\nimport org.joget.apps.form.model.Element;\nimport org.joget.apps.form.model.FormData;\nimport org.joget.apps.form.model.FormRow;\nimport org.joget.apps.form.model.FormRowSet;\nimport org.joget.apps.form.service.FormUtil;\nimport org.joget.commons.util.UuidGenerator;\n \npublic saveInfoPer(Element element, FormRowSet rows, FormData formData) {\n     \n    Connection con = null;\n     \n    try {\n       \n        DataSource ds = (DataSource) AppUtil.getApplicationContext().getBean(\"setupDataSource\");\n \n        con = ds.getConnection();\n         \n        if(!con.isClosed()) {\n          \n            UuidGenerator uuid = UuidGenerator.getInstance();\n             \n\n             \n            Iterator i= rows.iterator();\n            while (i.hasNext()) {\n                FormRow row = (FormRow) i.next();\n                String pId = uuid.getUuid();\n                String column1 = row.get(\"idPhoto\");\n                String column2 = row.get(\"idFirstName\");\n                String column3 = row.get(\"idLastName\");\n                String column4 = row.get(\"idAdress\");\n                String column5 = row.get(\"idNumTele\");\n                String column6 = row.get(\"idDescription\");\n                String column7 = row.get(\"idFKuser\");\n                String column8 = row.get(\"idGenerExperience\");\n\n                String x= \"SELECT * FROM app_fd_info_profil WHERE id=?\";\n                PreparedStatement stmt = con.prepareStatement(x);\n                stmt.setString(1, column8);\n                ResultSet rs = stmt.executeQuery();\n      \n                Boolean isExist = false;\n                if (rs.next()) {\n                    isExist = true;\n                }\n                \n                if (isExist) {\n                    String  updateSql = \"UPDATE app_fd_info_profil SET c_idPhoto = ?, c_idFirstName = ?, c_idLastName = ?, c_idAdress = ?, c_idNumTele = ?, c_idDescription = ?  WHERE id = ?\";\n                    PreparedStatement stmtUPDATE = con.prepareStatement(updateSql);\n\n                    stmtUPDATE.setString(1, column1);\n                    stmtUPDATE.setString(2, column2);\n                    stmtUPDATE.setString(3, column3);\n                    stmtUPDATE.setString(4, column4);\n                    stmtUPDATE.setString(5, column5);\n                    stmtUPDATE.setString(6, column6);\n                    stmtUPDATE.setString(7, column8);\n                \n                    stmtUPDATE.executeUpdate();\n                }else{\n                    \n                String insertSql = \"INSERT INTO app_fd_info_profil (id,c_idPhoto,c_idFirstName,c_idLastName,c_idAdress,c_idNumTele,c_idDescription,c_idFKuser) VALUES (?,?,?,?,?,?,?,?);\";\n                PreparedStatement stmtInsert = con.prepareStatement(insertSql);\n                 \n                stmtInsert.setString(1, pId);\n                stmtInsert.setString(2, column1);\n                stmtInsert.setString(3, column2);\n                stmtInsert.setString(4, column3);\n                stmtInsert.setString(5, column4);\n                stmtInsert.setString(6, column5);\n                stmtInsert.setString(7, column6);\n                stmtInsert.setString(8, column7);\n               \n                stmtInsert.executeUpdate();\n                \n                    }\n            }\n        }\n    } catch (Exception ex) {\n        LogUtil.error(\"Your App/Plugin Name\", ex, \"Error storing using jdbc\");\n    } finally {\n        try {\n            if (con != null) {\n                con.close();\n            }\n        } catch (Exception ex) {\n            LogUtil.error(\"Your App/Plugin Name\", ex, \"Error closing the jdbc connection\");\n        }\n    }\n}\n\nsaveInfoPer(element, rows, formData);\n"
                            }
                        },
                        "uniqueKey": "",
                        "validateMaxRow": "",
                        "validateMinRow": "",
                        "validator": {
                            "className": "",
                            "properties": {}
                        }
                    }
                }],
                "properties": {"width": "100%"}
            }],
            "properties": {
                "comment": "",
                "id": "id_Profile",
                "join": "",
                "label": "INFORMATIONS PERSONNELLES",
                "loadBinder": {
                    "className": "",
                    "properties": {}
                },
                "permission": {
                    "className": "",
                    "properties": {}
                },
                "permissionReadonly": "",
                "readonly": "",
                "readonlyLabel": "",
                "regex": "",
                "reverse": "",
                "storeBinder": {
                    "className": "",
                    "properties": {}
                },
                "visibilityControl": "",
                "visibilityValue": ""
            }
        },
        {
            "className": "org.joget.apps.form.model.Section",
            "elements": [{
                "className": "org.joget.apps.form.model.Column",
                "elements": [{
                    "className": "org.joget.SubformRepeater",
                    "properties": {
                        "addMode": "enable",
                        "collapsedByDefault": "",
                        "collapsible": "true",
                        "deleteMode": "enable",
                        "editFormDefId": "",
                        "editMode": "enable",
                        "enableSorting": "",
                        "errorMessage": "@@form.formgrid.invalidNumberOfRow@@",
                        "formDefId": "idExperience",
                        "id": "idExperience",
                        "label": "Ajouter un exp√©rience",
                        "loadBinder": {
                            "className": "org.joget.apps.form.lib.BeanShellFormBinder",
                            "properties": {
                                "autoHandleFiles": "",
                                "autoHandleWorkflowVariable": "true",
                                "cacheInterval": "",
                                "script": "import java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport javax.sql.DataSource;\nimport org.joget.apps.app.service.AppUtil;\nimport org.joget.apps.form.model.Form;\nimport org.joget.apps.form.model.Element;\nimport org.joget.apps.form.model.FormData;\nimport org.joget.apps.form.model.FormRow;\nimport org.joget.apps.form.model.FormRowSet;\nimport org.joget.apps.form.service.FormUtil;\nimport org.joget.commons.util.UuidGenerator;\n \nFormRowSet f = new FormRowSet();\nf.setMultiRow(true);\n \n\nDataSource ds = (DataSource) AppUtil.getApplicationContext().getBean(\"setupDataSource\");\n \ncon = ds.getConnection();\n \nif (!con.isClosed()) {\n    \n    //String jib_id = \"#requestParam.id#\";\n    String fk = \"#currentUser.username#\";\n   \n    String x = \"select id,c_idPoste,c_identrepris,c_idClient,c_idDateFin,c_idDescription from app_fd_Experiences where c_idFKuser=?\";\n    PreparedStatement stmt = con.prepareStatement(x);\n    stmt.setString(1, fk);\n  \n    \n    ResultSet rs = stmt.executeQuery();\n         \n   \n    while (rs.next()) {\n        FormRow r1 = new FormRow();\n        r1.put(\"idGenerExperience\", rs.getString(1));\n        r1.put(\"idPoste\", rs.getString(2));\n        r1.put(\"identrepris\", rs.getString(3));\n        r1.put(\"idClient\", rs.getString(4));\n        r1.put(\"idDateFin\", rs.getString(5));\n        r1.put(\"idDescription\", rs.getString(6));\n        f.add(r1);\n    }\n}\n \nreturn f;"
                            }
                        },
                        "readonly": "",
                        "readonlyLabel": "",
                        "storeBinder": {
                            "className": "org.joget.apps.form.lib.BeanShellFormBinder",
                            "properties": {
                                "autoHandleFiles": "",
                                "autoHandleWorkflowVariable": "true",
                                "cacheInterval": "",
                                "script": "import java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport javax.sql.DataSource;\nimport org.joget.apps.app.service.AppUtil;\nimport org.joget.apps.form.model.Form;\nimport org.joget.apps.form.model.Element;\nimport org.joget.apps.form.model.FormData;\nimport org.joget.apps.form.model.FormRow;\nimport org.joget.apps.form.model.FormRowSet;\nimport org.joget.apps.form.service.FormUtil;\nimport org.joget.commons.util.UuidGenerator;\n \npublic saveExperience(Element element, FormRowSet rows, FormData formData) {\n   \n    Connection con = null;\n     \n    try {\n       \n        DataSource ds = (DataSource) AppUtil.getApplicationContext().getBean(\"setupDataSource\");\n \n        con = ds.getConnection();\n         \n        if(!con.isClosed()) {\n   \n            UuidGenerator uuid = UuidGenerator.getInstance();\n            \n            Iterator i= rows.iterator();\n            while (i.hasNext()) {\n            FormRow row = (FormRow) i.next();\n                    String pId = uuid.getUuid();\n                    String column1 = row.get(\"idPoste\");\n                    String column2 = row.get(\"identrepris\");\n                    String column3 = row.get(\"idClient\");\n                    String column4 = row.get(\"idDateFin\");\n                    String column5 = row.get(\"idDescription\");\n                    String column6 = row.get(\"idFKuser\");\n                    String column7 = row.get(\"idGenerExperience\");\n                    \n\n                    String x= \"SELECT id FROM app_fd_Experiences WHERE id=?\";\n                    PreparedStatement stmt = con.prepareStatement(x);\n                    stmt.setString(1, column7);\n                    ResultSet rs = stmt.executeQuery();\n          \n                    Boolean isExist = false;\n                    if (rs.next()) {\n                        isExist = true;\n                    }\n\n\n                    if (isExist) {\n                    String  updateSql = \"UPDATE app_fd_Experiences SET c_idPoste = ?, c_identrepris = ?, c_idClient = ?, c_idDateFin = ?, c_idDescription = ? WHERE id = ?\";\n                    PreparedStatement stmtUPDATE = con.prepareStatement(updateSql);\n\n                    stmtUPDATE.setString(1, column1);\n                    stmtUPDATE.setString(2, column2);\n                    stmtUPDATE.setString(3, column3);\n                    stmtUPDATE.setString(4, column4);\n                    stmtUPDATE.setString(5, column5);\n                    stmtUPDATE.setString(6, column7);\n                \n                    stmtUPDATE.executeUpdate();\n                    }else{\n                    String insertSql = \"INSERT INTO app_fd_Experiences (id,c_idPoste,c_identrepris,c_idClient,c_idDateFin,c_idDescription,c_idFKuser) VALUES (?,?,?,?,?,?,?);\";\n                    PreparedStatement stmtInsert = con.prepareStatement(insertSql);\n                     \n                    stmtInsert.setString(1, pId);\n                    stmtInsert.setString(2, column1);\n                    stmtInsert.setString(3, column2);\n                    stmtInsert.setString(4, column3);\n                    stmtInsert.setString(5, column4);\n                    stmtInsert.setString(6, column5);\n                    stmtInsert.setString(7, column6);\n                    stmtInsert.executeUpdate();\n                \n                    }  \n            }\n        }\n    } catch (Exception ex) {\n        LogUtil.error(\"Your App/Plugin Name\", ex, \"Error storing using jdbc\");\n    } finally {\n        try {\n            if (con != null) {\n                con.close();\n            }\n        } catch (Exception ex) {\n            LogUtil.error(\"Your App/Plugin Name\", ex, \"Error closing the jdbc connection\");\n        }\n    }\n}\n\nsaveExperience(element, rows, formData);\n"
                            }
                        },
                        "uniqueKey": "",
                        "validateMaxRow": "",
                        "validateMinRow": "",
                        "validator": {
                            "className": "",
                            "properties": {}
                        }
                    }
                }],
                "properties": {"width": "100%"}
            }],
            "properties": {
                "comment": "",
                "id": "id_experience",
                "join": "",
                "label": "EXP√âRIENCES",
                "loadBinder": {
                    "className": "",
                    "properties": {}
                },
                "permission": {
                    "className": "",
                    "properties": {}
                },
                "permissionReadonly": "",
                "readonly": "",
                "readonlyLabel": "",
                "regex": "",
                "reverse": "",
                "storeBinder": {
                    "className": "",
                    "properties": {}
                },
                "visibilityControl": "",
                "visibilityValue": ""
            }
        },
        {
            "className": "org.joget.apps.form.model.Section",
            "elements": [{
                "className": "org.joget.apps.form.model.Column",
                "elements": [{
                    "className": "org.joget.SubformRepeater",
                    "properties": {
                        "addMode": "enable",
                        "collapsedByDefault": "",
                        "collapsible": "true",
                        "deleteMode": "enable",
                        "editFormDefId": "",
                        "editMode": "enable",
                        "enableSorting": "",
                        "errorMessage": "@@form.formgrid.invalidNumberOfRow@@",
                        "formDefId": "id_formation",
                        "id": "idFormation",
                        "label": "Ajouter un Formation",
                        "loadBinder": {
                            "className": "org.joget.apps.form.lib.BeanShellFormBinder",
                            "properties": {
                                "autoHandleFiles": "",
                                "autoHandleWorkflowVariable": "true",
                                "cacheInterval": "",
                                "script": "import java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport javax.sql.DataSource;\nimport org.joget.apps.app.service.AppUtil;\nimport org.joget.apps.form.model.Form;\nimport org.joget.apps.form.model.Element;\nimport org.joget.apps.form.model.FormData;\nimport org.joget.apps.form.model.FormRow;\nimport org.joget.apps.form.model.FormRowSet;\nimport org.joget.apps.form.service.FormUtil;\nimport org.joget.commons.util.UuidGenerator;\n \nFormRowSet f = new FormRowSet();\nf.setMultiRow(true);\n \n\nDataSource ds = (DataSource) AppUtil.getApplicationContext().getBean(\"setupDataSource\");\n \ncon = ds.getConnection();\n \nif (!con.isClosed()) {\n    \n   // String recordId = \"#requestParam.id#\";\n    String fk = \"#currentUser.username#\";\n   \n    String sql = \"select id,c_idFormation,c_id_niveau,c_idDomaine,c_idEtablissement,c_idDateTerminer,c_idDescription from app_fd_formation where c_idFKuser=?\";\n    PreparedStatement stmt = con.prepareStatement(sql);\n    stmt.setString(1, fk);\n  \n    \n    ResultSet rs = stmt.executeQuery();\n         \n   \n    while (rs.next()) {\n        FormRow r1 = new FormRow();\n         r1.put(\"idGenerExperience\", rs.getString(1));\n        r1.put(\"idFormation\", rs.getString(2));\n        r1.put(\"id_niveau\", rs.getString(3));\n        r1.put(\"idDomaine\", rs.getString(4));\n        r1.put(\"idEtablissement\", rs.getString(5));\n        r1.put(\"idDateTerminer\", rs.getString(6));\n        r1.put(\"idDescription\", rs.getString(7));\n        f.add(r1);\n    }\n}\n \nreturn f;"
                            }
                        },
                        "readonly": "",
                        "readonlyLabel": "",
                        "storeBinder": {
                            "className": "org.joget.apps.form.lib.BeanShellFormBinder",
                            "properties": {
                                "autoHandleFiles": "",
                                "autoHandleWorkflowVariable": "true",
                                "cacheInterval": "",
                                "script": "import java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport javax.sql.DataSource;\nimport org.joget.apps.app.service.AppUtil;\nimport org.joget.apps.form.model.Form;\nimport org.joget.apps.form.model.Element;\nimport org.joget.apps.form.model.FormData;\nimport org.joget.apps.form.model.FormRow;\nimport org.joget.apps.form.model.FormRowSet;\nimport org.joget.apps.form.service.FormUtil;\nimport org.joget.commons.util.UuidGenerator;\n \npublic saveFormations(Element element, FormRowSet rows, FormData formData) {\n     \n    Connection con = null;\n     \n    try {\n       \n        DataSource ds = (DataSource) AppUtil.getApplicationContext().getBean(\"setupDataSource\");\n \n        con = ds.getConnection();\n         \n        if(!con.isClosed()) {\n          \n            UuidGenerator uuid = UuidGenerator.getInstance();\n            \n             \n            Iterator i= rows.iterator();\n            while (i.hasNext()) {\n                FormRow row = (FormRow) i.next();\n                    String pId = uuid.getUuid();\n                    String column1 = row.get(\"idFormation\");\n                    String column2 = row.get(\"id_niveau\");\n                    String column3 = row.get(\"idDomaine\");\n                    String column4 = row.get(\"idEtablissement\");\n                    String column5 = row.get(\"idDateTerminer\");\n                    String column6 = row.get(\"idDescription\");\n                    String column7 = row.get(\"idFKuser\");\n                    String column8 = row.get(\"idGenerExperience\");\n                    \n                    String x= \"SELECT id FROM app_fd_formation WHERE id=?\";\n                    PreparedStatement stmt = con.prepareStatement(x);\n                    stmt.setString(1, column8);\n                    ResultSet rs = stmt.executeQuery();\n          \n                    Boolean isExist = false;\n                    if (rs.next()) {\n                        isExist = true;\n                    }\n\n                    if (isExist) {\n                    String  updateSql = \"UPDATE app_fd_formation SET c_idFormation = ?, c_id_niveau = ?, c_idDomaine = ?, c_idEtablissement = ?, c_idDateTerminer = ?, c_idDescription = ? WHERE id = ?\";\n                    PreparedStatement stmtUPDATE = con.prepareStatement(updateSql);\n\n                    stmtUPDATE.setString(1, column1);\n                    stmtUPDATE.setString(2, column2);\n                    stmtUPDATE.setString(3, column3);\n                    stmtUPDATE.setString(4, column4);\n                    stmtUPDATE.setString(5, column5);\n                    stmtUPDATE.setString(6, column6);\n                    stmtUPDATE.setString(7, column8);\n                \n                    stmtUPDATE.executeUpdate();\n                }else{\n                    String insertSql = \"INSERT INTO app_fd_formation (id,c_idFormation,c_id_niveau,c_idDomaine,c_idEtablissement,c_idDateTerminer,c_idDescription,c_idFKuser) VALUES (?,?,?,?,?,?,?,?);\";\n                    PreparedStatement stmtInsert = con.prepareStatement(insertSql);\n                     \n                    stmtInsert.setString(1, pId);\n                    stmtInsert.setString(2, column1);\n                    stmtInsert.setString(3, column2);\n                    stmtInsert.setString(4, column3);\n                    stmtInsert.setString(5, column4);\n                    stmtInsert.setString(6, column5);\n                    stmtInsert.setString(7, column6);\n                    stmtInsert.setString(8, column7);\n                   \n                    stmtInsert.executeUpdate();\n                \n                    } \n            }\n        }\n    } catch (Exception ex) {\n        LogUtil.error(\"Your App/Plugin Name\", ex, \"Error storing using jdbc\");\n    } finally {\n        try {\n            if (con != null) {\n                con.close();\n            }\n        } catch (Exception ex) {\n            LogUtil.error(\"Your App/Plugin Name\", ex, \"Error closing the jdbc connection\");\n        }\n    }\n}\n\nsaveFormations(element, rows, formData);\n"
                            }
                        },
                        "uniqueKey": "",
                        "validateMaxRow": "",
                        "validateMinRow": "",
                        "validator": {
                            "className": "",
                            "properties": {}
                        }
                    }
                }],
                "properties": {"width": "100%"}
            }],
            "properties": {
                "comment": "",
                "id": "idFormation",
                "join": "",
                "label": "FORMATIONS",
                "loadBinder": {
                    "className": "",
                    "properties": {}
                },
                "permission": {
                    "className": "",
                    "properties": {}
                },
                "permissionReadonly": "",
                "readonly": "",
                "readonlyLabel": "",
                "regex": "",
                "reverse": "",
                "storeBinder": {
                    "className": "",
                    "properties": {}
                },
                "visibilityControl": "",
                "visibilityValue": ""
            }
        },
        {
            "className": "org.joget.apps.form.model.Section",
            "elements": [{
                "className": "org.joget.apps.form.model.Column",
                "elements": [{
                    "className": "org.joget.SubformRepeater",
                    "properties": {
                        "addMode": "enable",
                        "collapsedByDefault": "",
                        "collapsible": "true",
                        "deleteMode": "enable",
                        "editFormDefId": "",
                        "editMode": "enable",
                        "enableSorting": "",
                        "errorMessage": "@@form.formgrid.invalidNumberOfRow@@",
                        "formDefId": "id_competence_cles",
                        "id": "field12",
                        "label": "Ajouter les comp√©tences cl√©s",
                        "loadBinder": {
                            "className": "org.joget.apps.form.lib.BeanShellFormBinder",
                            "properties": {
                                "autoHandleFiles": "",
                                "autoHandleWorkflowVariable": "true",
                                "cacheInterval": "",
                                "script": "import java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport javax.sql.DataSource;\nimport org.joget.apps.app.service.AppUtil;\nimport org.joget.apps.form.model.Form;\nimport org.joget.apps.form.model.Element;\nimport org.joget.apps.form.model.FormData;\nimport org.joget.apps.form.model.FormRow;\nimport org.joget.apps.form.model.FormRowSet;\nimport org.joget.apps.form.service.FormUtil;\nimport org.joget.commons.util.UuidGenerator;\n \nFormRowSet f = new FormRowSet();\nf.setMultiRow(true);\n \n\nDataSource ds = (DataSource) AppUtil.getApplicationContext().getBean(\"setupDataSource\");\n \ncon = ds.getConnection();\n \nif (!con.isClosed()) {\n    \n    //String recordId = \"#requestParam.id#\";\n    String fk = \"#currentUser.username#\";\n   \n    String sql = \"select id,c_id_competence_cles from app_fd_competence_cles where c_idFKuser=?\";\n    PreparedStatement stmt = con.prepareStatement(sql);\n    stmt.setString(1, fk);\n  \n    \n    ResultSet rs = stmt.executeQuery();\n         \n   \n    while (rs.next()) {\n        FormRow r1 = new FormRow();\n         r1.put(\"idGenerExperience\", rs.getString(1));\n        r1.put(\"id_competence_cles\", rs.getString(2));\n        f.add(r1);\n    }\n}\n \nreturn f;"
                            }
                        },
                        "readonly": "",
                        "readonlyLabel": "",
                        "storeBinder": {
                            "className": "org.joget.apps.form.lib.BeanShellFormBinder",
                            "properties": {
                                "autoHandleFiles": "",
                                "autoHandleWorkflowVariable": "true",
                                "cacheInterval": "",
                                "script": "import java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport javax.sql.DataSource;\nimport org.joget.apps.app.service.AppUtil;\nimport org.joget.apps.form.model.Form;\nimport org.joget.apps.form.model.Element;\nimport org.joget.apps.form.model.FormData;\nimport org.joget.apps.form.model.FormRow;\nimport org.joget.apps.form.model.FormRowSet;\nimport org.joget.apps.form.service.FormUtil;\nimport org.joget.commons.util.UuidGenerator;\n \npublic saveCompetenceCles(Element element, FormRowSet rows, FormData formData) {\n   \n    Connection con = null;\n     \n    try {\n       \n        DataSource ds = (DataSource) AppUtil.getApplicationContext().getBean(\"setupDataSource\");\n \n        con = ds.getConnection();\n         \n        if(!con.isClosed()) {\n          \n            UuidGenerator uuid = UuidGenerator.getInstance();\n            \n            Iterator i= rows.iterator();\n            while (i.hasNext()) {\n                FormRow row = (FormRow) i.next();\n                String pId = uuid.getUuid();\n                String column1 = row.get(\"id_competence_cles\");\n                String column2 = row.get(\"idFKuser\");\n                String column3 = row.get(\"idGenerExperience\");\n\n                String x= \"SELECT id FROM app_fd_competence_cles WHERE id=?\";\n                PreparedStatement stmt = con.prepareStatement(x);\n                stmt.setString(1, column3);\n                ResultSet rs = stmt.executeQuery();\n      \n                Boolean isExist = false;\n                if (rs.next()) {\n                    isExist = true;\n                }\n\n                if (isExist) {\n                    String  updateSql = \"UPDATE app_fd_competence_cles SET c_id_competence_cles = ? WHERE id = ?\";\n                    PreparedStatement stmtUPDATE = con.prepareStatement(updateSql);\n\n                    stmtUPDATE.setString(1, column1);\n                    stmtUPDATE.setString(2, column3);\n                \n                    stmtUPDATE.executeUpdate();\n                }else{\n                    String insertSql = \"INSERT INTO app_fd_competence_cles (id,c_id_competence_cles,c_idFKuser) VALUES (?,?,?);\";\n                    PreparedStatement stmtInsert = con.prepareStatement(insertSql);\n                    \n                    stmtInsert.setString(1, pId);\n                    stmtInsert.setString(2, column1);\n                    stmtInsert.setString(3, column2);\n\n\n                    stmtInsert.executeUpdate();\n                \n                    } \n               \n            }\n        }\n    } catch (Exception ex) {\n        LogUtil.error(\"Your App/Plugin Name\", ex, \"Error storing using jdbc\");\n    } finally {\n        try {\n            if (con != null) {\n                con.close();\n            }\n        } catch (Exception ex) {\n            LogUtil.error(\"Your App/Plugin Name\", ex, \"Error closing the jdbc connection\");\n        }\n    }\n}\n\nsaveCompetenceCles(element, rows, formData);\n\n"
                            }
                        },
                        "uniqueKey": "",
                        "validateMaxRow": "",
                        "validateMinRow": "",
                        "validator": {
                            "className": "",
                            "properties": {}
                        }
                    }
                }],
                "properties": {"width": "100%"}
            }],
            "properties": {
                "comment": "",
                "id": "id_competence_cles",
                "join": "",
                "label": "COMP√âTENCES CL√âS",
                "loadBinder": {
                    "className": "",
                    "properties": {}
                },
                "permission": {
                    "className": "",
                    "properties": {}
                },
                "permissionReadonly": "",
                "readonly": "",
                "readonlyLabel": "",
                "regex": "",
                "reverse": "",
                "storeBinder": {
                    "className": "",
                    "properties": {}
                },
                "visibilityControl": "",
                "visibilityValue": ""
            }
        },
        {
            "className": "org.joget.apps.form.model.Section",
            "elements": [{
                "className": "org.joget.apps.form.model.Column",
                "elements": [{
                    "className": "org.joget.SubformRepeater",
                    "properties": {
                        "addMode": "enable",
                        "collapsedByDefault": "",
                        "collapsible": "true",
                        "deleteMode": "enable",
                        "editFormDefId": "",
                        "editMode": "enable",
                        "enableSorting": "",
                        "errorMessage": "@@form.formgrid.invalidNumberOfRow@@",
                        "formDefId": "idCompetence",
                        "id": "idCompetence",
                        "label": "Ajouter un comp√©tence",
                        "loadBinder": {
                            "className": "org.joget.apps.form.lib.BeanShellFormBinder",
                            "properties": {
                                "autoHandleFiles": "",
                                "autoHandleWorkflowVariable": "true",
                                "cacheInterval": "",
                                "script": "import java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport javax.sql.DataSource;\nimport org.joget.apps.app.service.AppUtil;\nimport org.joget.apps.form.model.Form;\nimport org.joget.apps.form.model.Element;\nimport org.joget.apps.form.model.FormData;\nimport org.joget.apps.form.model.FormRow;\nimport org.joget.apps.form.model.FormRowSet;\nimport org.joget.apps.form.service.FormUtil;\nimport org.joget.commons.util.UuidGenerator;\n \nFormRowSet f = new FormRowSet();\nf.setMultiRow(true);\n \n\nDataSource ds = (DataSource) AppUtil.getApplicationContext().getBean(\"setupDataSource\");\n \ncon = ds.getConnection();\n \nif (!con.isClosed()) {\n    \n    //String recordId = \"#requestParam.id#\";\n        String fk = \"#currentUser.username#\";\n   \n    String sql = \"select id,c_idCompetence,c_idNiveau from app_fd_competence_technique where c_idFKuser=?\";\n    PreparedStatement stmt = con.prepareStatement(sql);\n    stmt.setString(1, fk);\n  \n    \n    ResultSet rs = stmt.executeQuery();\n         \n   \n    while (rs.next()) {\n        FormRow r1 = new FormRow();\n        r1.put(\"idGenerExperience\", rs.getString(1));\n        r1.put(\"idCompetence\", rs.getString(2));\n        r1.put(\"idNiveau\", rs.getString(3));\n        f.add(r1);\n    }\n}\n \nreturn f;"
                            }
                        },
                        "readonly": "",
                        "readonlyLabel": "",
                        "storeBinder": {
                            "className": "org.joget.apps.form.lib.BeanShellFormBinder",
                            "properties": {
                                "autoHandleFiles": "",
                                "autoHandleWorkflowVariable": "true",
                                "cacheInterval": "",
                                "script": "import java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport javax.sql.DataSource;\nimport org.joget.apps.app.service.AppUtil;\nimport org.joget.apps.form.model.Form;\nimport org.joget.apps.form.model.Element;\nimport org.joget.apps.form.model.FormData;\nimport org.joget.apps.form.model.FormRow;\nimport org.joget.apps.form.model.FormRowSet;\nimport org.joget.apps.form.service.FormUtil;\nimport org.joget.commons.util.UuidGenerator;\n \npublic saveCompetencTech(Element element, FormRowSet rows, FormData formData) {\n     \n    Connection con = null;\n     \n    try {\n       \n        DataSource ds = (DataSource) AppUtil.getApplicationContext().getBean(\"setupDataSource\");\n \n        con = ds.getConnection();\n         \n        if(!con.isClosed()) {\n          \n            UuidGenerator uuid = UuidGenerator.getInstance();\n             \n             \n            Iterator i= rows.iterator();\n            while (i.hasNext()) {\n                FormRow row = (FormRow) i.next();\n                 \n                String pId = uuid.getUuid();\n                String column1 = row.get(\"idCompetence\");\n                String column2 = row.get(\"idNiveau\");\n                String column3 = row.get(\"idFKuser\");\n                String column4 = row.get(\"idGenerExperience\");\n\n                String x= \"SELECT id FROM app_fd_competence_technique WHERE id=?\";\n                PreparedStatement stmt = con.prepareStatement(x);\n                stmt.setString(1, column4);\n                ResultSet rs = stmt.executeQuery();\n      \n                Boolean isExist = false;\n                if (rs.next()) {\n                    isExist = true;\n                }\n                \n                if (isExist) {\n                    String  updateSql = \"UPDATE app_fd_competence_technique SET c_idCompetence = ?, c_idNiveau=?  WHERE id = ?\";\n                    PreparedStatement stmtUPDATE = con.prepareStatement(updateSql);\n\n                    stmtUPDATE.setString(1, column1);\n                    stmtUPDATE.setString(2, column2);\n                    stmtUPDATE.setString(3, column4);\n                \n                    stmtUPDATE.executeUpdate();\n                }else{\n                    String insertSql = \"INSERT INTO app_fd_competence_technique (id,c_idCompetence,c_idNiveau,c_idFKuser) VALUES (?,?,?,?);\";\n                    PreparedStatement stmtInsert = con.prepareStatement(insertSql);\n                 \n                    stmtInsert.setString(1, pId);\n                    stmtInsert.setString(2, column1);\n                    stmtInsert.setString(3, column2);\n                    stmtInsert.setString(4, column3);\n                    \n                    \n                    stmtInsert.executeUpdate();\n                \n                    }  \n            }\n        }\n    } catch (Exception ex) {\n        LogUtil.error(\"Your App/Plugin Name\", ex, \"Error storing using jdbc\");\n    } finally {\n        try {\n            if (con != null) {\n                con.close();\n            }\n        } catch (Exception ex) {\n            LogUtil.error(\"Your App/Plugin Name\", ex, \"Error closing the jdbc connection\");\n        }\n    }\n}\n\nsaveCompetencTech(element, rows, formData);\n"
                            }
                        },
                        "uniqueKey": "",
                        "validateMaxRow": "",
                        "validateMinRow": "",
                        "validator": {
                            "className": "",
                            "properties": {}
                        }
                    }
                }],
                "properties": {"width": "100%"}
            }],
            "properties": {
                "comment": "",
                "id": "idCompetence_1",
                "join": "",
                "label": "COMP√âTENCES TECHNIQUES",
                "loadBinder": {
                    "className": "",
                    "properties": {}
                },
                "permission": {
                    "className": "",
                    "properties": {}
                },
                "permissionReadonly": "",
                "readonly": "",
                "readonlyLabel": "",
                "regex": "",
                "reverse": "",
                "storeBinder": {
                    "className": "",
                    "properties": {}
                },
                "visibilityControl": "",
                "visibilityValue": ""
            }
        },
        {
            "className": "org.joget.apps.form.model.Section",
            "elements": [{
                "className": "org.joget.apps.form.model.Column",
                "elements": [{
                    "className": "org.joget.SubformRepeater",
                    "properties": {
                        "addMode": "enable",
                        "collapsedByDefault": "",
                        "collapsible": "true",
                        "deleteMode": "enable",
                        "editFormDefId": "",
                        "editMode": "enable",
                        "enableSorting": "",
                        "errorMessage": "@@form.formgrid.invalidNumberOfRow@@",
                        "formDefId": "inLangue",
                        "id": "idLange",
                        "label": "Ajouter un Langue",
                        "loadBinder": {
                            "className": "org.joget.apps.form.lib.BeanShellFormBinder",
                            "properties": {
                                "autoHandleFiles": "",
                                "autoHandleWorkflowVariable": "true",
                                "cacheInterval": "",
                                "script": "import java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport javax.sql.DataSource;\nimport org.joget.apps.app.service.AppUtil;\nimport org.joget.apps.form.model.Form;\nimport org.joget.apps.form.model.Element;\nimport org.joget.apps.form.model.FormData;\nimport org.joget.apps.form.model.FormRow;\nimport org.joget.apps.form.model.FormRowSet;\nimport org.joget.apps.form.service.FormUtil;\nimport org.joget.commons.util.UuidGenerator;\n \nFormRowSet f = new FormRowSet();\nf.setMultiRow(true);\n \n\nDataSource ds = (DataSource) AppUtil.getApplicationContext().getBean(\"setupDataSource\");\n \ncon = ds.getConnection();\n \nif (!con.isClosed()) {\n    \n    //String recordId = \"#requestParam.id#\";\n    String fk = \"#currentUser.username#\";\n   \n    String sql = \"select id,c_idLangue,c_idNiveau from app_fd_Langue where c_idFKuser=?\";\n    PreparedStatement stmt = con.prepareStatement(sql);\n    stmt.setString(1, fk);\n  \n    \n    ResultSet rs = stmt.executeQuery();\n         \n   \n    while (rs.next()) {\n        FormRow r1 = new FormRow();\n        r1.put(\"idGenerExperience\", rs.getString(1));\n        r1.put(\"idLangue\", rs.getString(2));\n        r1.put(\"idNiveau\", rs.getString(3));\n        f.add(r1);\n    }\n}\n \nreturn f;"
                            }
                        },
                        "readonly": "",
                        "readonlyLabel": "",
                        "storeBinder": {
                            "className": "org.joget.apps.form.lib.BeanShellFormBinder",
                            "properties": {
                                "autoHandleFiles": "",
                                "autoHandleWorkflowVariable": "true",
                                "cacheInterval": "",
                                "script": "import java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport javax.sql.DataSource;\nimport org.joget.apps.app.service.AppUtil;\nimport org.joget.apps.form.model.Form;\nimport org.joget.apps.form.model.Element;\nimport org.joget.apps.form.model.FormData;\nimport org.joget.apps.form.model.FormRow;\nimport org.joget.apps.form.model.FormRowSet;\nimport org.joget.apps.form.service.FormUtil;\nimport org.joget.commons.util.UuidGenerator;\n \npublic saveLangue(Element element, FormRowSet rows, FormData formData) {\n     \n    Connection con = null;\n     \n    try {\n       \n        DataSource ds = (DataSource) AppUtil.getApplicationContext().getBean(\"setupDataSource\");\n \n        con = ds.getConnection();\n         \n        if(!con.isClosed()) {\n          \n            UuidGenerator uuid = UuidGenerator.getInstance();\n             \n\n             \n            Iterator i= rows.iterator();\n            while (i.hasNext()) {\n                FormRow row = (FormRow) i.next();\n                String pId = uuid.getUuid();\n                String column1 = row.get(\"idLangue\");\n                String column2 = row.get(\"idNiveau\");\n                String column3 = row.get(\"idFKuser\");\n                String column4 = row.get(\"idGenerExperience\");\n\n                String x= \"SELECT id FROM app_fd_Langue WHERE id=?\";\n                PreparedStatement stmt = con.prepareStatement(x);\n                stmt.setString(1, column4);\n                ResultSet rs = stmt.executeQuery();\n      \n                Boolean isExist = false;\n                if (rs.next()) {\n                    isExist = true;\n                }\n                \n                if (isExist) {\n                    String  updateSql = \"UPDATE app_fd_Langue SET c_idLangue = ?, c_idNiveau=?  WHERE id = ?\";\n                    PreparedStatement stmtUPDATE = con.prepareStatement(updateSql);\n\n                    stmtUPDATE.setString(1, column1);\n                    stmtUPDATE.setString(2, column2);\n                    stmtUPDATE.setString(3, column4);\n                \n                    stmtUPDATE.executeUpdate();\n                }else{\n                    \n                String insertSql = \"INSERT INTO app_fd_Langue (id,c_idLangue,c_idNiveau,c_idFKuser) VALUES (?,?,?,?);\";\n                PreparedStatement stmtInsert = con.prepareStatement(insertSql);\n                 \n                stmtInsert.setString(1, pId);\n                stmtInsert.setString(2, column1);\n                stmtInsert.setString(3, column2);\n                stmtInsert.setString(4, column3);\n               \n                stmtInsert.executeUpdate();\n                \n                    }\n            }\n        }\n    } catch (Exception ex) {\n        LogUtil.error(\"Your App/Plugin Name\", ex, \"Error storing using jdbc\");\n    } finally {\n        try {\n            if (con != null) {\n                con.close();\n            }\n        } catch (Exception ex) {\n            LogUtil.error(\"Your App/Plugin Name\", ex, \"Error closing the jdbc connection\");\n        }\n    }\n}\n\nsaveLangue(element, rows, formData);\n"
                            }
                        },
                        "uniqueKey": "",
                        "validateMaxRow": "",
                        "validateMinRow": "",
                        "validator": {
                            "className": "",
                            "properties": {}
                        }
                    }
                }],
                "properties": {"width": "100%"}
            }],
            "properties": {
                "comment": "",
                "id": "idLangue",
                "join": "",
                "label": "LANGUES",
                "loadBinder": {
                    "className": "",
                    "properties": {}
                },
                "permission": {
                    "className": "",
                    "properties": {}
                },
                "permissionReadonly": "",
                "readonly": "",
                "readonlyLabel": "",
                "regex": "",
                "reverse": "",
                "storeBinder": {
                    "className": "",
                    "properties": {}
                },
                "visibilityControl": "",
                "visibilityValue": ""
            }
        },
        {
            "className": "org.joget.apps.form.model.Section",
            "elements": [{
                "className": "org.joget.apps.form.model.Column",
                "elements": [{
                    "className": "org.joget.plugin.SectionWizard",
                    "properties": {
                        "clickableStep": "true",
                        "id": "field14",
                        "sections": "id_Profile,id_experience,idFormation,id_competence_cles,idCompetence_1,idLangue"
                    }
                }],
                "properties": {"width": "100%"}
            }],
            "properties": {
                "comment": "",
                "id": "section6",
                "join": "",
                "label": "CV de #currentUser.username#",
                "loadBinder": {
                    "className": "",
                    "properties": {}
                },
                "permission": {
                    "className": "",
                    "properties": {}
                },
                "permissionReadonly": "",
                "readonly": "",
                "readonlyLabel": "",
                "regex": "",
                "reverse": "",
                "storeBinder": {
                    "className": "",
                    "properties": {}
                },
                "visibilityControl": "",
                "visibilityValue": ""
            }
        }
    ],
    "properties": {
        "description": "",
        "id": "idInfoCV",
        "loadBinder": {
            "className": "org.joget.apps.form.lib.WorkflowFormBinder",
            "properties": {}
        },
        "name": "Cr√©e CV",
        "noPermissionMessage": "",
        "permission": {
            "className": "",
            "properties": {}
        },
        "postProcessor": {
            "className": "",
            "properties": {}
        },
        "postProcessorRunOn": "create",
        "storeBinder": {
            "className": "org.joget.apps.form.lib.WorkflowFormBinder",
            "properties": {}
        },
        "tableName": "info_personnel"
    }
}